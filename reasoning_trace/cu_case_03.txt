Overall Context and Setup Assumptions: This is an OpenAirInterface (OAI) 5G NR standalone (SA) mode deployment using radio frequency simulator (rfsim) for testing. The setup consists of three main components: CU (Central Unit), DU (Distributed Unit), and UE (User Equipment). Expected flow involves: component initialization → F1 interface setup between CU and DU → NGAP setup with AMF → UE random access (PRACH) → RRC connection → PDU session establishment. Key potential issues to look for include logging system failures from invalid log level configurations, network interface binding failures, and protocol handshake errors. The network_config shows cu_conf with invalid global_log_level="invalid" (should be valid strings like "error", "warning", "info", "debug", "trace"), du_conf with valid log levels, and ue_conf with rfsimulator settings. Initial analysis shows global_log_level="invalid" as a clear configuration error since this parameter expects specific string values for log verbosity control.

Analyzing CU Logs: CU initialization shows partial success with PDCP, NGAP registration, and GTPU configuration attempts, but critical failures occur: GTPU bind fails with "Cannot assign requested address" for 192.168.8.43:2152, SCTP connection establishment fails, resulting in "can't create GTP-U instance" and "Failed to create CUUP N3 UDP listener". Despite these failures, F1AP setup succeeds with DU connection and UE context creation. The CU shows "No AMF is associated to the gNB", indicating NGAP connection failure. Cross-referencing with network_config, the cu_conf shows NETWORK_INTERFACES with GNB_IPV4_ADDRESS_FOR_NG_AMF and GNB_IPV4_ADDRESS_FOR_NGU both set to 192.168.8.43, which matches the failed GTPU bind address. The logs appear truncated compared to previous cases, suggesting logging system issues.

Analyzing DU Logs: DU initialization is successful with RU (Radio Unit) configuration using librfsimulator.so, proper antenna setup (4x4 MIMO), and TDD configuration for band 78. Random access procedure completes successfully: PRACH detection at frame 183.19, RA-Msg2/Msg3/Msg4 exchange, and contention resolution. UE achieves stable connection with good signal metrics (RSRP -44 dB, SNR 57.0 dB, BLER decreasing over time). Statistics show normal UL/DL traffic with increasing frame counts (256.0, 384.0, 512.0, etc.) and stable MCS 9. No PHY/MAC errors or assertions are present. The DU appears fully functional and can communicate with both CU (via F1) and UE (via rfsim).

Analyzing UE Logs: UE shows repetitive band 78 TDD configuration confirmations and Harq round statistics progressing from 8/0/0 to 11/0/0 downlink rounds, indicating active communication. No connection failures or errors are evident - the UE appears to be successfully connected and exchanging data with the network via rfsimulator. The ue_conf shows proper rfsimulator configuration with serveraddr "127.0.0.1" and serverport "4043", matching the DU's rfsimulator settings.

Cross-Component Correlations and Root Cause Hypothesis: The log_config.global_log_level="invalid" configuration in cu_conf is the root cause. This invalid string value (instead of expected values like "error", "warning", "info", "debug", "trace") causes logging system initialization failures, which may corrupt error reporting and affect the initialization sequence. The GTPU and SCTP binding failures (errno 99 "Cannot assign requested address") are symptoms of initialization problems compounded by poor error visibility from broken logging. Timeline correlation shows CU initialization partially succeeds (F1AP works), but network-facing services fail, while DU and UE operate normally. The DU-UE communication succeeds because it bypasses the CU's problematic logging and initialization issues via direct F1 interface. This explains why RRC connection works but AMF association fails - the CU can handle F1 signaling but cannot establish external network connections due to initialization failures masked by logging issues.

Recommendations for Fix and Further Analysis: Change global_log_level from "invalid" to a valid string value (e.g., "info", "warning", or "error") in cu_conf.log_config. Verify logging system initializes properly after the fix. Test with corrected configuration to ensure GTPU/SCTP binding succeeds. Monitor initialization logs and error reporting during startup. If issues persist, check for logging library compatibility or configuration parsing errors.

Corrected network_config:
{
  "cu_conf": {
    "log_config": {
      "global_log_level": "info"  // Changed from invalid "invalid" to valid log level
    }
  }
}
